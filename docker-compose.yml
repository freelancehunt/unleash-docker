services:
  # The Unleash server contains the Unleash configuration and
  # communicates with server-side SDKs and the Unleash Proxy
  web:
    build:
      context: .
      args:
        NODE_VERSION: 18-alpine
    ports:
      - "4242:4242"
    environment:
      # This points Unleash to its backing database (defined in the `db` section below)
      DATABASE_URL: "postgres://postgres:unleash@db/postgres"
      # Disable SSL for database connections. @chriswk: why do we do this?
      DATABASE_SSL: "false"
      # Initialize Unleash with a default set of client API tokens. To
      # initialize Unleash with multiple tokens, separate them with a
      # comma (`token1,token2`).
      #
      # These tokens can be used by the Proxy or by *server-side* client
      # SDKs. For front-end client SDKs that talk to the Proxy, use a
      # key from `proxy.environment.UNLEASH_PROXY_CLIENT_KEYS`
      # instead.
      INIT_CLIENT_API_TOKENS: ${INIT_CLIENT_API_TOKENS}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_CALLBACK_URL: ${GOOGLE_CALLBACK_URL}
      GOOGLE_ALLOWED_DOMAIN: ${GOOGLE_ALLOWED_DOMAIN}
    depends_on:
      - db
    command: node index.js
    healthcheck:
      test: ["CMD", "nc",  "-z", "db", "5432"]
      interval: 1s
      timeout: 1m
      retries: 5
      start_period: 15s

  db:
    expose:
      - "5432"
    image: postgres:14
    environment:
      # create a database called `db`
      POSTGRES_DB: "db"
      # trust incoming connections blindly (DON'T DO THIS IN PRODUCTION!)
      POSTGRES_HOST_AUTH_METHOD: "trust"
    healthcheck:
      test: ["CMD", "pg_isready", "--username=postgres", "--host=127.0.0.1", "--port=5432"]
      interval: 2s
      timeout: 1m
      retries: 5
      start_period: 10s
